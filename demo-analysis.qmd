---
title: "Demo 360 Quarto analysis"
subtitle: "With another comment on the thing here"
author: "James Goldie, 360info"
date: "2022-03-11"
code-fold: true
theme: style/article.scss
---

This demo analyses some data on emissions of various pollutants from Our World in Data in R, then creates a chart in Observable JS. The [pollution-embed.qmd]() file is anb embeddable version of that chart.

## The analysis

This analysis is _really quick_: we download the OWID data, selecting a
few columns and giving them tidier names, and we pass it immediately onto Observable JS.

```{r}
#| label: import

library(readr)

pollution <-
  read_csv(
    paste0(
      "https://github.com/owid/owid-datasets/raw/",
      "dd7a4ecbb249f98028e25c304ef7d68de8979ea9/datasets/",
      "Air%20Pollutant%20Emissions%20-%20OECD/",
      "Air%20Pollutant%20Emissions%20-%20OECD.csv"),
    col_select =
      c(Entity, Year, `Carbon Monoxide`, `Carbon Monoxide (Index)`))      

names(pollution) <- c("country", "year", "co_tpyr", "co_index")
pollution
```
Here's what the data looks like. To pass it on to Observable JS, we call `ojs_define`. We also pass a list of the countries in the data on separately so
that we can use it for a dropdown menu.

```{r}
#| label: inspect
ojs_define(pollution = pollution)
ojs_define(country_list = unique(pollution$country))
```

The names that we use in `ojs_define` are now available below.

## The visualisation

Now, let's chart the data using
[Observable Plot](https://observablehq.com/@observablehq/plot)! And to make things a little trickier, let's throw a dropdown menu for the country in,
courtesy of [Observable Inputs](https://observablehq.com/@observablehq/inputs). 

```{ojs}
//| label: pollutionplot

// here's our dropdown menu, using the country list from R
viewof countrySelect = Inputs.select(country_list, {label: "Pick a country:"});

// transpose() changes our data from column-major (in R/Python) to row-major for
// Observable Plot. Then the filter function filters it based on the country
// input above (hence it's reactive!)
filteredPollution = transpose(pollution).filter(function(row) {
  return row.country == countrySelect;
})

// finally, here's out chart
pollutionChart = Plot.plot({
  marks: [
    // horizontal line at y = 0
    Plot.ruleY([0]),
    // bars of tonnes emitted per year, with a tooltip
    Plot.barY(filteredPollution, {
      x: "year",
      y: "co_tpyr",
      title: (d) => `${d.country} in ${d.year}: ${d.co_tpyr} tonnes`
    })
  ],
  width: 1024
});
```

Nice! Now check out [`demo-embed.qmd`](demo-embed.html) for the embeddable version!

The above example shows that we can have 'reactive' plots at the language level: I can connect a dropdown or other input to the plot and have it respond very easily.

Newer versions of Observable Plot support tooltips and hover styling, although it seems that the version embedded with Quarto doesn't. Other kinds of interactivity don't seem to work.

That said, we can write any kind of JavaScript in an OJS cell, or even import and reuse a chart from a notebook published on <observablehq.com>, provided it's marked with an open source licence. We can even combine this approach with Observable Inputs.

For example, [here's one from d3](https://observablehq.com/@d3/bar-chart-transitions), who are also the makers of Observable Plot:

```{ojs}
//| label: d3barchart

import {BarChart} from "@d3/bar-chart-transitions"

d3barchart = BarChart(filteredPollution, {
  x: d => d.year,
  y: d => d.co_tpyr,
  yFormat: "",
  yLabel: "â†‘ Carbon Monoxide",
  width,
  height: 350,
  color: "#333"
});
```

Note that the dropdown menu from the previous chart controls this one too! So we can use Observable Inputs with custom charts (although note there's no transition - that would be hadled using the chart's `update` method).